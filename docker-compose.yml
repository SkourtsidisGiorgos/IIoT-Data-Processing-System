---
version: '2'

volumes:
    prometheus_data: {}
    grafana_data: {}
    influxdb2:
    redis_data: 


services:

  #streaming_iot:
  #    build: 
  #      context: .
  #      #args:
  #      #  A: B
  #    image: ntua/streaming_iot
  #    container_name: streaming_iot
  #    # depends_on:
  #    #   - 
  #    expose:
  #      - 10000
  #    ports:
  #      - 10000:10000
  #    volumes:
  #      - ./config:/config
  #      - ./logs:/logs

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.3.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: my_kafka_connect:latest
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.3.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    #command:
    #- bash
    #- -c
    #- |
    #  unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY && confluent-hub install --no-promp confluentinc/kafka-connect-influxdb:1.2.6 /etc/confluent/docker/run

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.3.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.3.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  #ksql-datagen:
  #  image: confluentinc/ksqldb-examples:7.3.0
  #  hostname: ksql-datagen
  #  container_name: ksql-datagen
  #  depends_on:
  #    - ksqldb-server
  #    - broker
  #    - schema-registry
  #    - connect
  #  command: "bash -c 'echo Waiting for Kafka to be ready... && \
  #                     cub kafka-ready -b broker:29092 1 40 && \
  #                     echo Waiting for Confluent Schema Registry to be ready... && \
  #                     cub sr-ready schema-registry 8081 40 && \
  #                     echo Waiting a few seconds for topic creation to finish... && \
  #                     sleep 11 && \
  #                     tail -f /dev/null'"
  #  environment:
  #    KSQL_CONFIG_DIR: "/etc/ksql"
  #    STREAMS_BOOTSTRAP_SERVERS: broker:29092
  #    STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
  #    STREAMS_SCHEMA_REGISTRY_PORT: 8081

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.3.0
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  grafana:
      image: grafana/grafana
      container_name: grafana
      #network_mode: host
      #depends_on:
      #  - prometheus
      ports:
        - 3000:3000
      volumes:
        - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
        - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
        - ./monitoring/grafana/config.ini:/etc/grafana/config.ini
        - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
        - grafana_data:/var/lib/grafana
      environment:
        - GF_SECURITY_ADMIN_PASSWORD=admin
        - GF_USERS_ALLOW_SIGN_UP=false
        # - GF_SERVER_DOMAIN=myrul.com
        # - GF_SMTP_ENABLED=true
        # - GF_SMTP_HOST=smtp.gmail.com:587
        # - GF_SMTP_USER=myadrress@gmail.com
        # - GF_SMTP_PASSWORD=mypassword
        # - GF_SMTP_FROM_ADDRESS=myaddress@gmail.com

  #graphite:
  #  image: graphiteapp/graphite-statsd
  #  restart: always
  #  ports:
  #    - "18081:80"
  #    - "2003-2004:2003-2004"
  #    - "2023-2024:2023-2024"
  #    - "8125:8125/udp"
  #    - "8126:8126"

  cadvisor:
      image: google/cadvisor
      container_name: cadvisor
      privileged: true
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
      ports:
        - 8080:8080
      #network_mode: host

  #prometheus:
  #  image: prom/prometheus
  #  user: root
  #  container_name: prometheus
  #  volumes:
  #  # - ./monitoring/prometheus:/etc/prometheus
  #  - ./monitoring/prometheus/prometheus_dev.yml:/etc/prometheus/prometheus.yml
  #  # - ./monitoring/prometheus/rules.yml:/etc/prometheus/rules.yml
  #  - prometheus_data:/prometheus
  #  command:
  #    - '--config.file=/etc/prometheus/prometheus.yml'
  #    # - '-alertmanager.url=http://alertmanager:9093'
  #  expose:
  #    - 9090
  #  ports:
  #    - 9090:9090
  #    #- 10000:10000
  #  depends_on:
  #    - cadvisor
  #  #network_mode: host

  redis:
    image: 'bitnami/redis:latest'
    container_name: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - '6379:6379'
    volumes: 
      - redis_data:/data
    #network_mode: host

#  influxdb:
#    image: influxdb:latest
#    container_name: influxdb2
#    volumes:
#      - /mnt/influxdb/data:/var/lib/influxdb2:rw
##    env_file:
##      - .env
##    entrypoint: ["./entrypoint.sh"]
#    ports:
#      - 8086:8086
#    restart: unless-stopped

#  telegraf:
#    image: telegraf:latest
#    container_name: telegraf
##    links:
##      - influxdb
#    volumes:
#      #  Sync timezone with host
#      - /etc/localtime:/etc/localtime:ro
#      #  Map Telegraf configuration file
#      #- /mnt/influxdb/telegraf.conf:/etc/telegraf/telegraf.conf:ro
#      #  Map /tmp to permanent storage  (this includes /tmp/metrics.out)
#      - /mnt/influxdb:/tmp:rw
#    restart: unless-stopped
#    depends_on:
#      - influxdb